//
//  SaveSearchHistoryUseCaseSpec.swift
//  IlluMefyTests
//
//  Created by Assistant on 2025/06/16.
//

import Quick
import Nimble
import Foundation
@testable import IlluMefy

@MainActor
class SaveSearchHistoryUseCaseSpec: QuickSpec {
    override class func spec() {
        describe("SaveSearchHistoryUseCase") {
            var useCase: SaveSearchHistoryUseCase!
            var mockRepository: MockSaveSearchHistoryRepository!
            
            beforeEach {
                mockRepository = MockSaveSearchHistoryRepository()
                useCase = SaveSearchHistoryUseCase(repository: mockRepository)
            }
            
            afterEach {
                useCase = nil
                mockRepository = nil
            }
            
            context("Ê≠£Â∏∏„Ç±„Éº„Çπ") {
                it("Ê§úÁ¥¢Â±•Ê≠¥„ÅÆ‰øùÂ≠ò„ÅåÊàêÂäü„Åô„Çã") {
                    // Given
                    let query = "„Ç≤„Éº„É†ÂÆüÊ≥Å"
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var error: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(error).to(beNil())
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                    expect(mockRepository.saveSearchHistoryCallCount).to(equal(1))
                }
                
                it("Á©∫ÊñáÂ≠ó„ÅÆÊ§úÁ¥¢Â±•Ê≠¥„ÇÇ‰øùÂ≠ò„Åï„Çå„Çã") {
                    // Given
                    let query = ""
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var error: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(error).to(beNil())
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(""))
                    expect(mockRepository.saveSearchHistoryCallCount).to(equal(1))
                }
                
                it("Êó•Êú¨Ë™û„ÅÆÊ§úÁ¥¢Â±•Ê≠¥„Åå‰øùÂ≠ò„Åï„Çå„Çã") {
                    // Given
                    let query = "FPS„Ç≤„Éº„É†ÈÖç‰ø°ËÄÖ"
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var error: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(error).to(beNil())
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                }
                
                it("Ëã±Ë™û„ÅÆÊ§úÁ¥¢Â±•Ê≠¥„Åå‰øùÂ≠ò„Åï„Çå„Çã") {
                    // Given
                    let query = "apex legends streamer"
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var error: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(error).to(beNil())
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                }
                
                it("ÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄÊ§úÁ¥¢Â±•Ê≠¥„Åå‰øùÂ≠ò„Åï„Çå„Çã") {
                    // Given
                    let query = "VTuberüí´Ê≠å„Å£„Å¶„Åø„Åüüéµ"
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var error: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(error).to(beNil())
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                }
                
                it("Èï∑„ÅÑÊ§úÁ¥¢„ÇØ„Ç®„É™„ÇÇ‰øùÂ≠ò„Åï„Çå„Çã") {
                    // Given
                    let query = "„Åì„Çå„ÅØÈùûÂ∏∏„Å´Èï∑„ÅÑÊ§úÁ¥¢„ÇØ„Ç®„É™„ÅÆ‰æã„Åß„ÅÇ„Çä„Éó„É≠„Ç∞„É©„É†„ÅÆ„ÉÜ„Çπ„Éà„ÅÆ„Åü„ÇÅ„Å´‰ΩúÊàê„Åï„Çå„ÅüÊñáÂ≠óÂàó„Åß„ÅÇ„ÇäÂÆüÈöõ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅåÂÖ•Âäõ„Åô„ÇãÂèØËÉΩÊÄß„ÅØ‰Ωé„ÅÑ„Åß„Åô„ÅåÂãï‰ΩúÁ¢∫Ë™ç„Å®„Åó„Å¶‰ΩøÁî®„Åó„Åæ„Åô"
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var error: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(error).to(beNil())
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                }
            }
            
            context("„Ç®„É©„Éº„Ç±„Éº„Çπ") {
                it("„É™„Éù„Ç∏„Éà„É™„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº„Åå„Åù„ÅÆ„Åæ„ÅæÊäï„Åí„Çâ„Çå„Çã") {
                    // Given
                    let query = "„Ç≤„Éº„É†"
                    let testError = TestError.testError
                    mockRepository.saveSearchHistoryResult = .failure(testError)
                    
                    // When
                    var thrownError: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                thrownError = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(thrownError).toNot(beNil())
                    expect(thrownError as? TestError).to(equal(.testError))
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                    expect(mockRepository.saveSearchHistoryCallCount).to(equal(1))
                }
                
                it("„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà") {
                    // Given
                    let query = "VTuber"
                    struct NetworkError: Error, LocalizedError {
                        var errorDescription: String? { "„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº" }
                    }
                    let networkError = NetworkError()
                    mockRepository.saveSearchHistoryResult = .failure(networkError)
                    
                    // When
                    var thrownError: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                thrownError = err
                            }
                            done()
                        }
                    }
                    
                    // Then
                    expect(thrownError).toNot(beNil())
                    expect(thrownError?.localizedDescription).to(equal("„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº"))
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                }
            }
            
            context("Ë§áÊï∞Âõû„ÅÆÂÆüË°å") {
                it("Âêå„Åò„ÇØ„Ç®„É™„ÇíË§áÊï∞Âõû‰øùÂ≠ò„Åß„Åç„Çã") {
                    // Given
                    let query = "‰∫∫Ê∞ó„Ç≤„Éº„É†"
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var error1: Error?
                    var error2: Error?
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error1 = err
                            }
                            
                            do {
                                try await useCase.execute(query: query)
                            } catch let err {
                                error2 = err
                            }
                            
                            done()
                        }
                    }
                    
                    // Then
                    expect(error1).to(beNil())
                    expect(error2).to(beNil())
                    expect(mockRepository.saveSearchHistoryCallCount).to(equal(2))
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query))
                }
                
                it("Áï∞„Å™„Çã„ÇØ„Ç®„É™„ÇíË§áÊï∞Âõû‰øùÂ≠ò„Åß„Åç„Çã") {
                    // Given
                    let query1 = "„Ç≤„Éº„É†"
                    let query2 = "VTuber"
                    let query3 = "ÊñôÁêÜ"
                    mockRepository.saveSearchHistoryResult = .success(())
                    
                    // When
                    var errors: [Error?] = []
                    
                    waitUntil { done in
                        Task {
                            do {
                                try await useCase.execute(query: query1)
                                errors.append(nil)
                            } catch let err {
                                errors.append(err)
                            }
                            
                            do {
                                try await useCase.execute(query: query2)
                                errors.append(nil)
                            } catch let err {
                                errors.append(err)
                            }
                            
                            do {
                                try await useCase.execute(query: query3)
                                errors.append(nil)
                            } catch let err {
                                errors.append(err)
                            }
                            
                            done()
                        }
                    }
                    
                    // Then
                    expect(errors.compactMap { $0 }).to(beEmpty())
                    expect(mockRepository.saveSearchHistoryCallCount).to(equal(3))
                    expect(mockRepository.lastSaveSearchHistoryQuery).to(equal(query3))
                }
            }
        }
    }
}